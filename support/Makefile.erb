# Audience1st nightly and monthly cleanups
# run 'make nightly' every night and 'make monthly' every month via cron

VENUE 	   = <%= venue %>
DBUSER	   = <%= config['username'] || venue %>
DBPASS	   = <%= config['password'] %>
DBNAME	   = <%= config['db'] || venue %>
DBOPTS	   = '-u$(DBUSER)' '-p$(DBPASS)' 

NAME	   = audienc
HOME	   = /home/$(NAME)
BACKUPDIR = $(HOME)/backup/$(VENUE)
TODAY	   = $(shell date +\%d)
YEARMONTHDAY = $(shell date +\%Y-\%m-\%d)
APPROOT     = <%= release_path %>

#  IMPORTANT:  Binary path names below refer to the binary's path ON THE
#   DEPLOYMENT SYSTEM, not on your (development) system.  Many of these
#   commands are run from a cron job (which runs in an uncertain
#   environment) so it's best to fully qualify the path name (you can't
#   rely on /usr/bin/env in these cases).
GZIP	   = /usr/bin/gzip
RUBY	   = /usr/bin/ruby
PERL	   = /usr/bin/perl
MYSQL      = /usr/bin/mysql
MYSQLDUMP  = /usr/bin/mysqldump
S3CMD	   = S3CONF=$(HOME)/.s3conf /home/audienc/s3sync/s3cmd.rb

STATIC_TABLES = purchasemethods txn_types options 

# clean out sessions older than this many seconds
SESSION_CLEANOUT = 86400

# syntax for "be quiet" in whatever shell (usually bash or sh)
# suppreses Cron daemon from sending you email, but also means you won't
# see error messages.  if you uncomment this, you'll get those emails.
# QUIET      =  >/dev/null 2>&1

.PHONY: all nightly monthly clean_sessions backup_db backup_db_monthly backup_svn run_sql dump_static_data rotate_logs receive_goldstar receive_goldstar_test

all: nightly
nightly: clean_sessions notify_pending_followups backup_db backup_svn
#monthly: rotate_logs
monthly: backup_db_monthly

clean_sessions:
	@$(MYSQL) $(DBOPTS) '-D$(DBNAME)' -e 'delete from sessions where now() - updated_at > $(SESSION_CLEANOUT)' $(QUIET)

backup_db_monthly:
	@$(MYSQLDUMP) $(DBOPTS) $(DBNAME) | $(GZIP) > $(BACKUPDIR)/$(YEARMONTHDAY).gz
	@$(S3CMD) put a1_$(VENUE):$(YEARMONTHDAY).gz  $(BACKUPDIR)/$(YEARMONTHDAY).gz


backup_db:
	@$(MYSQLDUMP) $(DBOPTS) $(DBNAME) | $(GZIP) > $(BACKUPDIR)/db-$(TODAY).gz
	@$(S3CMD) put a1_$(VENUE):db-$(TODAY).gz  $(BACKUPDIR)/db-$(TODAY).gz

restore_db:
	$(MYSQL) $(DBOPTS) '-D$(DBNAME)' < $(FILE)

dump_static_data:
	@$(MYSQLDUMP) $(MYSQL_OPTS) $(A1_DB) $(STATIC_TABLES) > static.sql

rotate_logs:
	@$(PERL) $(BINDIR)/rotate_logs $(BACKUPDIR) $(QUIET)

receive_goldstar:
	@RAILS_ENV=production $(RUBY) $(APPROOT)/script/runner 'EmailGoldstar.receive(STDIN.read)' $(QUIET)

receive_goldstar_test:
	@RAILS_ENV=development $(RUBY) $(APPROOT)/script/runner 'EmailGoldstar.receive(STDIN.read)' $(QUIET)

notify_pending_followups:
	@RAILS_ENV=production $(RUBY) $(APPROOT)/script/runner 'Visit.notify_pending_followups' $(QUIET)

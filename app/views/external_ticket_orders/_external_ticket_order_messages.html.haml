%p
  - import.messages.each do |msg|
    = h msg
    %br

- maybe_hidden = ('display: none' unless defined?(for_email))

%p 
  - if import.vouchers && import.vouchers.length > 0
    #{import.vouchers.length - import.existing_vouchers} total vouchers will be entered
  - if import.existing_vouchers > 0
    #{import.existing_vouchers} vouchers in this order have been previously imported or entered

- if import.matched_customers.length > 0
  %p
    = link_to_function "#{import.matched_customers.length} existing customers", visual_effect(:toggle_blind, :matched_customers)
    were found and/or may be updated
  #matched_customers{:style => maybe_hidden}
    %table.hilite.import= render :partial => 'customers/customer', :collection => import.matched_customers.sort_by(&:sortable_name), :locals => {:read_only => true}

- if import.created_customers.length > 0 
  %p
    = link_to_function "#{import.created_customers.length} new customers", visual_effect(:toggle_blind, :created_customers)
    will be created (you should check for duplicates after import completes)
    = popup_help_for :check_for_duplicates_after_import
  #created_customers{:style => maybe_hidden}
    %table.hilite.import= render :partial => 'customers/customer', :collection => import.created_customers.sort_by(&:sortable_name), :locals => {:read_only => true}

- if import.created_showdates.length > 0
  %p
    = link_to_function "#{import.created_showdates.length} new showdates", visual_effect(:toggle_blind, :created_showdates)
    will be created
  %ol#created_showdates{:style => maybe_hidden}
    - import.created_showdates.sort_by(&:thedate).each do |showdate|
      %li= h showdate.full_date

- if import.created_vouchertypes.length > 0
  %p
    = link_to_function "#{import.created_vouchertypes.length} new voucher types", visual_effect(:toggle_blind, :created_vouchertypes)
    will be created
  %ol#created_vouchertypes{:style => maybe_hidden}
    - import.created_vouchertypes.each do |vouchertype|
      %li= h vouchertype.name_with_price
